### fragen ###

- commits nachtraeglich veraendern, z.b. aufteilen.
  wie geht das ?

- wie kann man probeweise ein "remote" auf seinem lokalen
  system anlegen.

- wie gehe ich zurueck zu einem zustand *vor* einem
  gewissen commit ? 

- warum sollte man manchmal ein --no-ff erzwingen ?

- unterschied zwischen reset und revert klar machen !


################################################################


- "git diff", oder "git diff <dateiname>" :

  zeigt unterschiede zum letzten commit

- "git checkout -- <dateiname>" :

  verwirft aenderungen in nicht commiteten files zugunsten
  es letzten commits. aber nur fuer aenderungen, die auch noch
  nicht gestasht wurden. 

- "git status"

- "git add -u" :

   adds all *tracked* files !

- "git add <file_1> <file_2> ... " :
  
   obvious

- "git log"
- "git show <HASH>"

- "git init" :
  anlegen eines lokalen repositories.

- github repo anlegen und acccess-token generieren, dann :

  -> git remote add origin2 https://meinteuch22@github.com/meinteuch22/psychic-spork.git
  dann
  -> git push -u origin2 master
  dann
  -> eingabe des access_tokens

- "git branch -a" :
   remote branches sehen.
   zu beachten : neben einem lokalen master gibt es auch einen remote-master.

- "git checkout -b new_test_branch" :
   branch anlegen und hineinwechseln

- "git branch <name_des_branches>" :
   branch anlegen

- "git checkout <name_des_branches>"
   in branch hineinwechseln 

- "git checkout -b <branchname> <hashvalue>" :
   erzeugung eines branches auf basis eines durch einen hashwert benannten commits.

- "git merge --no-ff new_feature"
   auch fast-forward-faehige commits werden ausdruecklich als merge gekennzeichnet. 

- "git push origin :remote_branch"
   loescht den branch "remote_branch" im remote-repository

- "git merge --abort" :
   merge (mit konflikten) abbrechen und auf pre-merge-zustand zurücksetzen.

######################## fehler korrigieren ###########################################


- undoing a stage-operation
  
   - "git rm --cached mistake_file" :
      wurde mistake_file gerade ueber "git add mistake_file" als zu tracken
      markiert, und ich moechte diese operation rueckgaengig machen.
      mistake_file bleibt aber wg. "--cached" im filesystem erhalten.

   - "git reset HEAD myfile2" :
      wurde myfile2 veraendert und bereits ueber "git add myfile2" in die
      staging-area versetzt, so kann man dadurch die aenderungen wieder
      bis zum zustand des heads zuruecknehmen.

    - "git checkout myfile2" :
      dadurch werden dann auch die aenderungen im file zurueckgesetzt.
      "... checkout restores the file to its version at the time of the last commit"
     

- undoing a commit

  - "git reset --soft HEAD~1"
     sofern aenderungen bereits commited wurden : gehe zurueck auf den vorherigen commit.
     aber lasse die aenderugne in der staging-area bestehen.

  - "git reset --mixed HEAD~1" :
     unstages the changed files

  - "git reset --hard HEAD~1" :
     even reverts the changes in the files.

  - es git statt "reset" auch noch "revert".
    wo ist der unterschied ?

- undoing a push

  - git reset --hard HEAD~2
    git push -f origin master

- die änderungen eines benannten commits rueckgaengig machen :

   - git revert <hash_des_commits_der_rueckgaengig_gemacht_werden_soll>


#### helfer ###########################################################################

- "git bisect ..."

   bisect kann auch an ein test-script gekoppelt werden !

- "git log --follow index.php" :
  
   zeige commits, die sich auf ein file beziehen (u.a.) 

- "git shortlog" :
   zeigt die nutzer mit ihren commit-kommentaren und anzahlen.

- "git log --grep='redirect'":
   suche nach dem string "redirect" in den log-messages.

- "git reflog"
   zeigt alle aenderungen. inkl. loesch-aktionen etc.
   ---> rekonstruktion von alten zustaenden ueber git checkout -b branchname hashvalue

- "git rebase -i HEAD~2" :
  führt die letzten zwei commits zusammen. 

- "git cherry-pick 30dc1fa2d"
  aenderungen des einen commits in den aktuellen branch uebernehmen.

